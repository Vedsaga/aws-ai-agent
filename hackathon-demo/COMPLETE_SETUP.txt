🚀 CIVIC SENSE - COMPLETE HACKATHON DEMO
=========================================

✅ BACKEND: FULLY DEPLOYED & TESTED
API: https://tzbw0aw913.execute-api.us-east-1.amazonaws.com/prod/

✅ FRONTEND: READY TO RUN
Single-page app with 80/20 map/chat layout

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 QUICK START (2 STEPS):

1. GET MAPBOX TOKEN (1 minute):
   → https://account.mapbox.com/access-tokens/
   → Sign up (free)
   → Copy token

2. START FRONTEND:
   cd hackathon-demo/frontend-react
   nano .env.local
   (paste your Mapbox token)
   
   npm install
   npm run dev
   
   Open: http://localhost:3000

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 FEATURES DEMO:

1. REPORT MODE 📝
   Type: "Broken streetlight at 456 Elm Street, very dangerous"
   → AI extracts: location, entity, severity
   → Pin drops on map with color-coded severity
   → Agent status shows real-time execution
   → Report saved to DynamoDB

2. QUERY MODE 🔍
   Type: "Show me all high severity issues"
   → Multi-agent analysis (What/Where/When)
   → Results displayed in chat
   → Map shows filtered pins
   → AI-generated summary

3. MANAGE MODE ⚙️
   Type: "Assign report XYZ to Team A and mark in progress"
   → Updates DynamoDB
   → Pin gets status ring (blue = in progress)
   → Confirmation in chat

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🗺️ MAP FEATURES:

SEVERITY PINS:
🔴 Critical (red)
🟠 High (orange)
🟡 Medium (yellow)
🟢 Low (green)

STATUS RINGS:
🟡 Amber = Pending
🔵 Blue = In Progress
🟢 Green = Resolved
⚫ Gray = Closed

AUTO-FIT:
- Calculates min/max lat/long
- Zooms to show all pins
- Smooth animations

POPUPS:
- Click any pin for details
- Shows: entity, location, severity, status, assignee
- Timestamp and report ID

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🤖 AI ORCHESTRATION:

INGESTION AGENTS:
- Geo Agent: Extracts location + coordinates
- Entity Agent: Identifies issue type
- Severity Agent: Assesses urgency
- Verifier: Checks confidence, requests clarification

QUERY AGENTS:
- What Agent: Analyzes incident types
- Where Agent: Location analysis
- When Agent: Temporal patterns
- Verifier: Synthesizes final answer

MANAGEMENT:
- Parses commands
- Updates DynamoDB
- Handles reserved keywords
- Returns confirmation

REAL-TIME STATUS:
- Shows which agents are running
- Displays confidence scores
- Color-coded status indicators
- Transparent execution flow

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🏗️ ARCHITECTURE:

BACKEND:
- AWS Lambda (Python 3.11)
- DynamoDB (reports storage)
- API Gateway (REST API)
- EventBridge (real-time events)
- Bedrock Nova Pro (orchestrator)
- Bedrock Nova Lite (agents)

FRONTEND:
- Next.js 14 (React)
- Mapbox GL JS (mapping)
- Tailwind CSS (styling)
- TypeScript (type safety)

DEPLOYMENT:
- CDK (Infrastructure as Code)
- Serverless (pay-per-use)
- ~3 minute deployment
- Minimal cost

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 CURRENT DATA:

Sample Reports in Database:
1. Pothole on Oak Street (high, pending)
2. Broken streetlight at 456 Elm Street (medium, in_progress, Team B)
3. Graffiti on Main Street (low, pending)

All visible on map with proper pins and status rings.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🧪 TESTING:

Backend Tests:
cd hackathon-demo
./test-backend.sh

Manual Frontend Test:
1. Open http://localhost:3000
2. Switch to Report mode
3. Type: "Pothole at 789 Pine Street, urgent"
4. Watch agents execute in real-time
5. See pin drop on map
6. Switch to Query mode
7. Type: "Show all reports"
8. See results in chat
9. Switch to Manage mode
10. Type: "Assign report [ID] to Team C"
11. See status ring change color

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📁 FILE STRUCTURE:

hackathon-demo/
├── cdk/                    # Backend infrastructure
│   ├── app.py             # CDK stack definition
│   └── requirements.txt
├── lambda/                 # Lambda functions
│   ├── orchestrator.py    # Main orchestration logic
│   └── requirements.txt
├── frontend-react/         # Frontend application
│   ├── app/
│   │   ├── page.tsx       # Main single-page app
│   │   ├── layout.tsx     # Root layout
│   │   └── globals.css    # Global styles
│   ├── components/
│   │   ├── CivicMap.tsx   # Enhanced map component
│   │   └── ui/            # UI components
│   ├── .env.local         # Environment config
│   └── package.json
├── deploy-backend.sh       # Backend deployment
├── test-backend.sh         # API testing
├── START_FRONTEND.sh       # Frontend launcher
└── COMPLETE_SETUP.txt      # This file

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎓 DEMO SCRIPT:

"Welcome to Civic Sense, an AI-powered civic engagement platform.

[Show Map]
This is our real-time map showing all reported issues across the city.

[Point to pins]
Each pin represents a report. Colors indicate severity:
- Red for critical
- Orange for high
- Yellow for medium  
- Green for low

[Click a pin]
Clicking shows full details: what's broken, where, who's assigned, and status.

[Show chat panel]
On the right, we have our AI assistant powered by multi-agent orchestration.

[Click mode selector]
We have three modes:
1. Report - Citizens report issues
2. Query - Analyze existing data
3. Manage - Assign and update tasks

[Switch to Report]
Let me report a new issue...
[Type: 'Broken streetlight at 123 Oak Street, very dark']

[Show agent status]
Watch as multiple AI agents work together:
- Geo agent extracts the location
- Entity agent identifies what's broken
- Severity agent assesses urgency
- Each shows confidence scores

[Point to new pin]
And there it is! A new pin on the map, color-coded by severity.

[Switch to Query]
Now let's query our data...
[Type: 'Show me all high severity issues']

[Show results]
The AI analyzes the database and provides a summary with all matching reports.

[Switch to Manage]
Finally, let's assign this to a team...
[Type: 'Assign report [ID] to Team A']

[Point to pin]
Notice the pin now has a blue ring - that means it's in progress!

This is the power of multi-agent AI orchestration for civic engagement."

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ CHECKLIST:

Backend:
☑ Lambda deployed
☑ DynamoDB created
☑ API Gateway configured
☑ All 3 flows tested (Ingestion/Query/Management)
☑ Bedrock integration working
☑ Real-time events configured

Frontend:
☑ Single-page layout (80/20)
☑ Map with auto-fit bounds
☑ Color-coded severity pins
☑ Status rings on pins
☑ Mode selector with icons
☑ Real-time agent status
☑ Chat interface
☑ API integration

Ready to Demo: YES ✅

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Need help? Check:
- FRONTEND_GUIDE.txt (detailed frontend docs)
- DEPLOYMENT_SUCCESS.txt (backend verification)
- test-backend.sh (API testing)
