#!/bin/bash

################################################################################
# Environment Setup Script
# Sets up environment variables and configuration files
################################################################################

set -e

echo "========================================="
echo "Environment Setup for Multi-Agent System"
echo "========================================="
echo ""

# Check if .env already exists
if [ -f ".env" ]; then
    echo "⚠️  .env file already exists!"
    read -p "Do you want to overwrite it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Keeping existing .env file"
        exit 0
    fi
fi

# Get AWS account info
echo "Fetching AWS account information..."
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo "")
AWS_REGION_DEFAULT=$(aws configure get region 2>/dev/null || echo "us-east-1")

if [ -z "$AWS_ACCOUNT_ID" ]; then
    echo "❌ Could not fetch AWS account ID. Make sure AWS CLI is configured."
    exit 1
fi

echo "✓ AWS Account ID: $AWS_ACCOUNT_ID"
echo "✓ Default Region: $AWS_REGION_DEFAULT"
echo ""

# Get CloudFormation stack outputs
echo "Fetching CloudFormation stack outputs..."
STACK_PREFIX="MultiAgentOrchestration-dev"

# Try to get API URL
API_URL=$(aws cloudformation describe-stacks \
    --stack-name "${STACK_PREFIX}-Api" \
    --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
    --output text 2>/dev/null || echo "")

# Try to get Cognito details
USER_POOL_ID=$(aws cloudformation describe-stacks \
    --stack-name "${STACK_PREFIX}-Auth" \
    --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
    --output text 2>/dev/null || echo "")

CLIENT_ID=$(aws cloudformation describe-stacks \
    --stack-name "${STACK_PREFIX}-Auth" \
    --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' \
    --output text 2>/dev/null || echo "")

# Prompt for missing values
if [ -z "$API_URL" ]; then
    read -p "Enter API_BASE_URL: " API_URL
fi

if [ -z "$USER_POOL_ID" ]; then
    read -p "Enter COGNITO_USER_POOL_ID: " USER_POOL_ID
fi

if [ -z "$CLIENT_ID" ]; then
    read -p "Enter COGNITO_CLIENT_ID: " CLIENT_ID
fi

# Prompt for test credentials
echo ""
echo "Test User Credentials (for development/testing only):"
read -p "Enter TEST_USERNAME [testuser]: " TEST_USERNAME
TEST_USERNAME=${TEST_USERNAME:-testuser}

read -sp "Enter TEST_PASSWORD: " TEST_PASSWORD
echo ""

if [ -z "$TEST_PASSWORD" ]; then
    echo "❌ Password cannot be empty"
    exit 1
fi

# Prompt for region
read -p "Enter AWS_REGION [$AWS_REGION_DEFAULT]: " AWS_REGION
AWS_REGION=${AWS_REGION:-$AWS_REGION_DEFAULT}

# Create .env file
echo ""
echo "Creating .env file..."

cat > .env << EOF
# AWS Configuration
AWS_REGION=$AWS_REGION
AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID

# API Configuration
API_BASE_URL=$API_URL

# Cognito Configuration
COGNITO_USER_POOL_ID=$USER_POOL_ID
COGNITO_CLIENT_ID=$CLIENT_ID
COGNITO_REGION=$AWS_REGION

# Test User Credentials (DO NOT USE IN PRODUCTION)
TEST_USERNAME=$TEST_USERNAME
TEST_PASSWORD=$TEST_PASSWORD

# DynamoDB Tables
CONFIGURATIONS_TABLE=MultiAgentOrchestration-dev-Data-Configurations
INCIDENTS_TABLE=MultiAgentOrchestration-dev-Incidents
QUERIES_TABLE=MultiAgentOrchestration-dev-Queries
TOOL_CATALOG_TABLE=MultiAgentOrchestration-dev-ToolCatalog

# Bedrock Model Configuration
BEDROCK_DEFAULT_MODEL=anthropic.claude-3-sonnet-20240229-v1:0
BEDROCK_AGENT_MODEL=amazon.nova-micro-v1:0
BEDROCK_ORCHESTRATOR_MODEL=amazon.nova-pro-v1:0
BEDROCK_EMBEDDING_MODEL=amazon.titan-embed-text-v1

# Lambda Configuration
LAMBDA_TIMEOUT=30
LAMBDA_MEMORY_SIZE=512
LAMBDA_RUNTIME=python3.11

# Deployment Configuration
DEPLOYMENT_STAGE=dev
PROJECT_NAME=MultiAgentOrchestration

# Database Configuration
DB_USERNAME=dbadmin

# S3 Buckets
EVIDENCE_BUCKET=multiagentorchestration-dev-evidence-$AWS_ACCOUNT_ID
CONFIG_BACKUP_BUCKET=multiagentorchestration-dev-config-backup-$AWS_ACCOUNT_ID
EOF

echo "✓ .env file created successfully!"
echo ""

# Create frontend config.js
if [ -d "infrastructure/frontend" ]; then
    echo "Creating frontend config.js..."
    cat > infrastructure/frontend/config.js << EOF
// Configuration for browser-based testing
// This file is auto-generated by setup-env.sh
// DO NOT commit this file to version control!

window.ENV = {
    API_BASE_URL: '$API_URL',
    COGNITO_USER_POOL_ID: '$USER_POOL_ID',
    COGNITO_CLIENT_ID: '$CLIENT_ID',
    AWS_REGION: '$AWS_REGION'
};
EOF
    echo "✓ frontend/config.js created successfully!"
    echo ""
fi

# Update .gitignore if needed
if ! grep -q "^\.env$" .gitignore 2>/dev/null; then
    echo "Updating .gitignore..."
    echo ".env" >> .gitignore
    echo "✓ Added .env to .gitignore"
fi

if [ -d "infrastructure/frontend" ] && ! grep -q "config\.js$" .gitignore 2>/dev/null; then
    echo "infrastructure/frontend/config.js" >> .gitignore
    echo "✓ Added config.js to .gitignore"
fi

echo ""
echo "========================================="
echo "✓ Setup Complete!"
echo "========================================="
echo ""
echo "Your environment is now configured."
echo ""
echo "Next steps:"
echo "  1. Review the .env file and adjust values if needed"
echo "  2. Run tests: cd infrastructure && python3 TEST.py"
echo "  3. Or run shell tests: cd infrastructure/frontend && ./test-api-authenticated.sh"
echo ""
echo "⚠️  IMPORTANT: Never commit .env or config.js to version control!"
echo ""
